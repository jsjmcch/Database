1. RIGHT OUTER JOIN, COUNT(*)의 동작 이해
http://stanleykou.tistory.com/entry/SQL-INNER-조인과-OUTER조인이-무엇인가요

- COUNT(*)은 중복포함, NULL 포함하여 개수를 센다
- RIGHT OUTER JOIN 은 왼쪽 테이블의 값이 없는 경우에도 조인을 수행할 때 사용한다.

SELECT COUNT(*)
FROM 직원 E RIGHT OUTER JOIN 부서 D
ON (E.부서번호 = D.부서번호 AND E.직원번호 <> '200')


2. UPDATE 쿼리 사용법, 조건비교시 IN 사용방법

- UPDATE 테이블명 SET 컬럼명 = 변경할 값 WHERE 변경할 컬럼의 조건
- 한사람이 여러부서의 매니저가  될 수 있으므로, 급여를 10% 증가할 부서도 여여러부서가 될 수 있음. 
- 따라서 Where절의 서브쿼리 결과가 복수개일 수 있으므로 IN 키워드를 이용하여 비교해야 함

참고1 : http://www.dofactory.com/sql/update
참고2 : http://www.dofactory.com/sql/where-in

UPDATE 직원 E
SET E.급여 = E.급여 * 1.1
WHERE E.부서번호 IN
	(SELECT D.부서번호 FROM 부서 D WHERE D.매니저번호 = '56000')
  

3. 집계쿼리 사용방법 이해 (GROUP BY ~ HAVING ~)

- MIN, MAX, COUNT 등의 집계쿼리는 GROUP BY 절과 함께 사용해야 한다.
- SELECT의 조회 컬럼중 집계함수가 적용되지 않은 모든 컬럼은 GROUP BY 절에 집계기준으로 기술해야 한다.
- 집계함수의 조건은 GROUP BY 절 뒤에 HAVING 키워드를 추가하고 기술할 수 있다.
- HAVING절에는 집계함수에 대한 조건만 기술할 수 있다. 집계 이전의 조건은 WHERE 절에 기술해야 한다.
- COUNT는 집계함수이므로 HAVING 절에 기술해야 한다.
- 집계삼수처리결과의 조건인 COUNT(*)>2 는 HAVING 절에 기술해야 한다.

참고 : http://ryu1hwan.tistory.com/entry/SQL문-기초에서중급까지L4GROUP-BY문

SELECT E.직급, MAX(E.나이)
FROM 직원 E JOIN 동호회 D
ON E.동호회번호 = D.동호회번호
AND D.동호회명 = '바툭'
GROUP BY E.직급
HAVING COUNT(*) > 2

4. CASE WHEN ~ THEN ~ END와  COUNT(*) 의 동작 이해

- CASE 구문에서 만족하는 조건이 없고 ELSE 절도 없을 때 NULL을 반환한다. 
- COUNT(*) 은 중복을 제거하지 않고, NULL 인 항목도 개수에 포함한다.
- COUNT 함수 안에 컬럼 이름을 명시하면 NULL 값은 세지 않는다.
- COUNT 함수 안에 DISTINCT 키워드를 사용하면 중복은 제거하고 센다.

 따라서 COUNT(*) 로 개수를 세면 중복포함, NULL 포함된 결과인 6이 나온다

SELECT COUNT(*)
FROM
(SELECT CASE WHEN 구매수량 >= 100 AND 구매수량 < 200 THEN 'B'
	     WHEN 구매수량 >= 200 THEN 'A'
	END "등급"
 FROM 구매)

참고 : http://goguri.tistory.com/entry/SQL-COUNT-함수


5. COUNT 함수 및 DISTINCT 키워드 동작 이해

조건 요약 : 계좌가 있는 고객만 세며, 여러 개의 계좌가 있더라도 동일인 일 경우 1개로 세야 한다.

① : 계좌가 없는 고객도 카운트에 포함됨
② : 계좌가 여러 개인 고객도 카운트에 포함됨 
③ : 2번과 동일
④ : 중복과 NULL이 제거된 고객번호가 카운트됨

참고 : https://technet.microsoft.com/ko-kr/library/ms175997(v=sql.110).aspx
- COUNT ( { [ [ ALL | DISTINCT ] expression ] | * } ) 
ALL
  모든 값에 집계 함수를 적용합니다. 기본값은 ALL입니다.
DISTINCT
  Null이 아닌 고유한 값의 개수만 반환하도록 지정합니다.

SELECT COUNT(DISTINCT A.고객번호)
FROM 계좌 A JOIN 고객 C
ON A.고객번호 = C.고객번호
AND C.거주지코드 = 'A1111'
  

6. NULL의 연산과 EXISTS키워드 이해

- WHERE EXISTS 다음의 서브쿼리는 TAB1의 COL2의 값이 TAB2에 있으면 1을 출력한 결과를 반환한다.
- 서브쿼리의 결과가 1개라도 존재하는 경우 EXISTS조건이 true가 되어 해당 열이 COUNT에 포함된다.
- NULL과 비교연산을 할 경우 해당 결과는 NULL 이 되며, Where조건절 에서 항상 거짓으로 처리된다.
- 만일 NULL과 등치연산을 하고자 한다면 등호가 아닌 IS NULL 키워드를 사용해야 한다.

 따라서 TAB1의 COL2의 세 번째 NULL만 제외한 나머지 행 수만큼 카운트된 결과가 출력된다.

참고 : https://en.wikipedia.org/wiki/Null_%28SQL%29#Controversy

SELECT COUNT(*)
FROM TAB1 A
WHERE EXISTS (SELECT 1 FROM TAB2 WHERE COL2 = A.COL2)

7.INDEX와 쿼리 성능 이해

인덱스가 알맞게 설정된 경우, 서브쿼리보다 조인이 성능상 유리하다.
복합인덱스의 경우 먼저 앞에 나온 인덱스부터 순서대로 적용된다.
(복합인덱스의 뒤에 나온 항목을 단독으로 사용할 경우 인덱스 적용이 되지 않는다)

①, ④ : 서브쿼리로 나온 결과에는 인덱스가 적용되지 않음
② : S.상품번호와 S.판매일자는 복합인덱스의 첫 번째 항목으로 둘 다 인덱스가 적용 됨
③ : S.판매처코드 는 복합인덱스의 두번째 항목으로 단독으로는 인덱스 적용이 안됨

판매 테이블의 데이터 건수가 상품테이블의 20배 많다. 
2번 쿼리에서 IN조건으로 두 개의 값을 비교한다 할 지라도 
3번 쿼리의 인덱스 없는 판매처코드 비교에 소요되는 데이터 건수가 압도적으로 많으므로
2번이 3번 쿼리보다 성능상 유리하다.

인덱스 사용시 고려사항
인덱스 키의 크기는 되도록 작게 설계해야 성능에 유리하다.
분포도가 좋은 칼럼(좁은 범위), 기본 키, 조인의 연결 고리가 되는 칼럼을 인덱스로 구성한다.
단일 인덱스 여러 개보다 다중 칼럼 인덱스의 생성을 고려한다.
업데이트가 빈번하지 않은 칼럼으로 인덱스를 구성한다.
JOIN 시 자주 사용하는 칼럼은 인덱스로 등록한다.
되도록 동등 비교(=)를 사용한다.
WHERE 절에서 자주 사용하는 칼럼에는 인덱스 추가를 고려한다.
인덱스를 많이 생성하는 것은 INSERT/UPDATE/DELETE의 성능 저하의 원인이 될 수 있다.
인덱스 스캔이 테이블 순차 스캔보다 항상 빠르지는 않다. 
보통 선택도(selectivity)가 5~10% 이내인 경우에 인덱스 스캔이 우수하다.

참고1 : https://stackoverflow.com/questions/14052596/subquery-v-s-inner-join-in-sql-server
참고2 : http://burning-dba.tistory.com/79
참고3 : http://ra2kstar.tistory.com/96
참고4 : http://d2.naver.com/helloworld/1155

SELECT P.상품명, P.단가, P.제조일시, S.판매가격
FROM 상품 P, 판매 S
WHERE P.상품번호 = S.상품번호
AND S.상품번호 = ?
AND P.상품분류코드 IN(?,?)
AND S.판매일자 >= ?


